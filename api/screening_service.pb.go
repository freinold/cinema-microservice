// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/screening_service.proto

package api

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateScreeningReq struct {
	MovieID int32 `protobuf:"varint,1,opt,name=movieID,proto3" json:"movieID,omitempty"`
	RoomID  int32 `protobuf:"varint,2,opt,name=roomID,proto3" json:"roomID,omitempty"`
}

func (m *CreateScreeningReq) Reset()      { *m = CreateScreeningReq{} }
func (*CreateScreeningReq) ProtoMessage() {}
func (*CreateScreeningReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00551891490cfeb7, []int{0}
}
func (m *CreateScreeningReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateScreeningReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateScreeningReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateScreeningReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateScreeningReq.Merge(m, src)
}
func (m *CreateScreeningReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateScreeningReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateScreeningReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateScreeningReq proto.InternalMessageInfo

func (m *CreateScreeningReq) GetMovieID() int32 {
	if m != nil {
		return m.MovieID
	}
	return 0
}

func (m *CreateScreeningReq) GetRoomID() int32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type CreateScreeningResp struct {
	ScreeningID int32 `protobuf:"varint,1,opt,name=screeningID,proto3" json:"screeningID,omitempty"`
}

func (m *CreateScreeningResp) Reset()      { *m = CreateScreeningResp{} }
func (*CreateScreeningResp) ProtoMessage() {}
func (*CreateScreeningResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00551891490cfeb7, []int{1}
}
func (m *CreateScreeningResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateScreeningResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateScreeningResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateScreeningResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateScreeningResp.Merge(m, src)
}
func (m *CreateScreeningResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateScreeningResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateScreeningResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateScreeningResp proto.InternalMessageInfo

func (m *CreateScreeningResp) GetScreeningID() int32 {
	if m != nil {
		return m.ScreeningID
	}
	return 0
}

type ChangeFreeSeatsReq struct {
	ScreeningID int32 `protobuf:"varint,1,opt,name=screeningID,proto3" json:"screeningID,omitempty"`
	Change      int32 `protobuf:"varint,2,opt,name=change,proto3" json:"change,omitempty"`
}

func (m *ChangeFreeSeatsReq) Reset()      { *m = ChangeFreeSeatsReq{} }
func (*ChangeFreeSeatsReq) ProtoMessage() {}
func (*ChangeFreeSeatsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00551891490cfeb7, []int{2}
}
func (m *ChangeFreeSeatsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeFreeSeatsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeFreeSeatsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeFreeSeatsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeFreeSeatsReq.Merge(m, src)
}
func (m *ChangeFreeSeatsReq) XXX_Size() int {
	return m.Size()
}
func (m *ChangeFreeSeatsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeFreeSeatsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeFreeSeatsReq proto.InternalMessageInfo

func (m *ChangeFreeSeatsReq) GetScreeningID() int32 {
	if m != nil {
		return m.ScreeningID
	}
	return 0
}

func (m *ChangeFreeSeatsReq) GetChange() int32 {
	if m != nil {
		return m.Change
	}
	return 0
}

type ChangeFreeSeatsResp struct {
}

func (m *ChangeFreeSeatsResp) Reset()      { *m = ChangeFreeSeatsResp{} }
func (*ChangeFreeSeatsResp) ProtoMessage() {}
func (*ChangeFreeSeatsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00551891490cfeb7, []int{3}
}
func (m *ChangeFreeSeatsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeFreeSeatsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeFreeSeatsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeFreeSeatsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeFreeSeatsResp.Merge(m, src)
}
func (m *ChangeFreeSeatsResp) XXX_Size() int {
	return m.Size()
}
func (m *ChangeFreeSeatsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeFreeSeatsResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeFreeSeatsResp proto.InternalMessageInfo

type DeleteScreeningReq struct {
	ScreeningID int32 `protobuf:"varint,1,opt,name=screeningID,proto3" json:"screeningID,omitempty"`
}

func (m *DeleteScreeningReq) Reset()      { *m = DeleteScreeningReq{} }
func (*DeleteScreeningReq) ProtoMessage() {}
func (*DeleteScreeningReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00551891490cfeb7, []int{4}
}
func (m *DeleteScreeningReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteScreeningReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteScreeningReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteScreeningReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteScreeningReq.Merge(m, src)
}
func (m *DeleteScreeningReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteScreeningReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteScreeningReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteScreeningReq proto.InternalMessageInfo

func (m *DeleteScreeningReq) GetScreeningID() int32 {
	if m != nil {
		return m.ScreeningID
	}
	return 0
}

type DeleteScreeningResp struct {
}

func (m *DeleteScreeningResp) Reset()      { *m = DeleteScreeningResp{} }
func (*DeleteScreeningResp) ProtoMessage() {}
func (*DeleteScreeningResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00551891490cfeb7, []int{5}
}
func (m *DeleteScreeningResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteScreeningResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteScreeningResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteScreeningResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteScreeningResp.Merge(m, src)
}
func (m *DeleteScreeningResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteScreeningResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteScreeningResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteScreeningResp proto.InternalMessageInfo

type DeleteRoomReq struct {
	RoomID int32 `protobuf:"varint,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
}

func (m *DeleteRoomReq) Reset()      { *m = DeleteRoomReq{} }
func (*DeleteRoomReq) ProtoMessage() {}
func (*DeleteRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00551891490cfeb7, []int{6}
}
func (m *DeleteRoomReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRoomReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRoomReq.Merge(m, src)
}
func (m *DeleteRoomReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRoomReq proto.InternalMessageInfo

func (m *DeleteRoomReq) GetRoomID() int32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type DeleteRoomResp struct {
}

func (m *DeleteRoomResp) Reset()      { *m = DeleteRoomResp{} }
func (*DeleteRoomResp) ProtoMessage() {}
func (*DeleteRoomResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00551891490cfeb7, []int{7}
}
func (m *DeleteRoomResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRoomResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRoomResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRoomResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRoomResp.Merge(m, src)
}
func (m *DeleteRoomResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRoomResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRoomResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRoomResp proto.InternalMessageInfo

type DeleteMovieReq struct {
	MovieID int32 `protobuf:"varint,1,opt,name=movieID,proto3" json:"movieID,omitempty"`
}

func (m *DeleteMovieReq) Reset()      { *m = DeleteMovieReq{} }
func (*DeleteMovieReq) ProtoMessage() {}
func (*DeleteMovieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00551891490cfeb7, []int{8}
}
func (m *DeleteMovieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMovieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMovieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMovieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMovieReq.Merge(m, src)
}
func (m *DeleteMovieReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMovieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMovieReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMovieReq proto.InternalMessageInfo

func (m *DeleteMovieReq) GetMovieID() int32 {
	if m != nil {
		return m.MovieID
	}
	return 0
}

type DeleteMovieResp struct {
}

func (m *DeleteMovieResp) Reset()      { *m = DeleteMovieResp{} }
func (*DeleteMovieResp) ProtoMessage() {}
func (*DeleteMovieResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00551891490cfeb7, []int{9}
}
func (m *DeleteMovieResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMovieResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMovieResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMovieResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMovieResp.Merge(m, src)
}
func (m *DeleteMovieResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMovieResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMovieResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMovieResp proto.InternalMessageInfo

type GetScreeningReq struct {
	ScreeningID int32 `protobuf:"varint,1,opt,name=screeningID,proto3" json:"screeningID,omitempty"`
}

func (m *GetScreeningReq) Reset()      { *m = GetScreeningReq{} }
func (*GetScreeningReq) ProtoMessage() {}
func (*GetScreeningReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00551891490cfeb7, []int{10}
}
func (m *GetScreeningReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScreeningReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScreeningReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScreeningReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScreeningReq.Merge(m, src)
}
func (m *GetScreeningReq) XXX_Size() int {
	return m.Size()
}
func (m *GetScreeningReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScreeningReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetScreeningReq proto.InternalMessageInfo

func (m *GetScreeningReq) GetScreeningID() int32 {
	if m != nil {
		return m.ScreeningID
	}
	return 0
}

type GetScreeningResp struct {
	MovieID       int32 `protobuf:"varint,1,opt,name=movieID,proto3" json:"movieID,omitempty"`
	RoomID        int32 `protobuf:"varint,2,opt,name=roomID,proto3" json:"roomID,omitempty"`
	NrOfFreeSeats int32 `protobuf:"varint,3,opt,name=nrOfFreeSeats,proto3" json:"nrOfFreeSeats,omitempty"`
}

func (m *GetScreeningResp) Reset()      { *m = GetScreeningResp{} }
func (*GetScreeningResp) ProtoMessage() {}
func (*GetScreeningResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00551891490cfeb7, []int{11}
}
func (m *GetScreeningResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScreeningResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScreeningResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScreeningResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScreeningResp.Merge(m, src)
}
func (m *GetScreeningResp) XXX_Size() int {
	return m.Size()
}
func (m *GetScreeningResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScreeningResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetScreeningResp proto.InternalMessageInfo

func (m *GetScreeningResp) GetMovieID() int32 {
	if m != nil {
		return m.MovieID
	}
	return 0
}

func (m *GetScreeningResp) GetRoomID() int32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *GetScreeningResp) GetNrOfFreeSeats() int32 {
	if m != nil {
		return m.NrOfFreeSeats
	}
	return 0
}

type GetScreeningsReq struct {
}

func (m *GetScreeningsReq) Reset()      { *m = GetScreeningsReq{} }
func (*GetScreeningsReq) ProtoMessage() {}
func (*GetScreeningsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00551891490cfeb7, []int{12}
}
func (m *GetScreeningsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScreeningsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScreeningsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScreeningsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScreeningsReq.Merge(m, src)
}
func (m *GetScreeningsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetScreeningsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScreeningsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetScreeningsReq proto.InternalMessageInfo

type GetScreeningsResp struct {
	Screenings []*GetScreeningResp `protobuf:"bytes,1,rep,name=Screenings,proto3" json:"Screenings,omitempty"`
}

func (m *GetScreeningsResp) Reset()      { *m = GetScreeningsResp{} }
func (*GetScreeningsResp) ProtoMessage() {}
func (*GetScreeningsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00551891490cfeb7, []int{13}
}
func (m *GetScreeningsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScreeningsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScreeningsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScreeningsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScreeningsResp.Merge(m, src)
}
func (m *GetScreeningsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetScreeningsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScreeningsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetScreeningsResp proto.InternalMessageInfo

func (m *GetScreeningsResp) GetScreenings() []*GetScreeningResp {
	if m != nil {
		return m.Screenings
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateScreeningReq)(nil), "CreateScreeningReq")
	proto.RegisterType((*CreateScreeningResp)(nil), "CreateScreeningResp")
	proto.RegisterType((*ChangeFreeSeatsReq)(nil), "ChangeFreeSeatsReq")
	proto.RegisterType((*ChangeFreeSeatsResp)(nil), "ChangeFreeSeatsResp")
	proto.RegisterType((*DeleteScreeningReq)(nil), "DeleteScreeningReq")
	proto.RegisterType((*DeleteScreeningResp)(nil), "DeleteScreeningResp")
	proto.RegisterType((*DeleteRoomReq)(nil), "DeleteRoomReq")
	proto.RegisterType((*DeleteRoomResp)(nil), "DeleteRoomResp")
	proto.RegisterType((*DeleteMovieReq)(nil), "DeleteMovieReq")
	proto.RegisterType((*DeleteMovieResp)(nil), "DeleteMovieResp")
	proto.RegisterType((*GetScreeningReq)(nil), "GetScreeningReq")
	proto.RegisterType((*GetScreeningResp)(nil), "GetScreeningResp")
	proto.RegisterType((*GetScreeningsReq)(nil), "GetScreeningsReq")
	proto.RegisterType((*GetScreeningsResp)(nil), "GetScreeningsResp")
}

func init() { proto.RegisterFile("api/screening_service.proto", fileDescriptor_00551891490cfeb7) }

var fileDescriptor_00551891490cfeb7 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x77, 0x89, 0x28, 0xd2, 0x84, 0x34, 0xc9, 0xb8, 0x45, 0x96, 0x91, 0x56, 0xd1, 0x0a,
	0x89, 0x8a, 0xc3, 0x56, 0xa4, 0xe2, 0xdf, 0x85, 0x03, 0x8d, 0x82, 0x7a, 0x00, 0xa4, 0xe4, 0xc6,
	0xa5, 0x32, 0xd1, 0x52, 0x8c, 0x88, 0xbd, 0xf5, 0x5a, 0x3d, 0xf3, 0x08, 0x3c, 0x06, 0xbc, 0x09,
	0xc7, 0x1c, 0x7b, 0x24, 0xce, 0x85, 0x63, 0x1f, 0x01, 0xd9, 0xc1, 0x8e, 0x77, 0x37, 0x6a, 0xd5,
	0xe3, 0xcc, 0xce, 0x37, 0x3b, 0xfb, 0xcd, 0x4f, 0x0b, 0x0f, 0x43, 0x15, 0x1d, 0xea, 0x59, 0x2a,
	0x65, 0x1c, 0xc5, 0x67, 0xa7, 0x5a, 0xa6, 0x17, 0xd1, 0x4c, 0x0a, 0x95, 0x26, 0x59, 0xc2, 0xc7,
	0x80, 0xc7, 0xa9, 0x0c, 0x33, 0x39, 0xad, 0x0a, 0x26, 0xf2, 0x1c, 0x7d, 0xb8, 0x37, 0x4f, 0x2e,
	0x22, 0x79, 0x32, 0xf2, 0xe9, 0x80, 0x1e, 0xdc, 0x9d, 0x54, 0x21, 0x3e, 0x80, 0x9d, 0x34, 0x49,
	0xe6, 0x27, 0x23, 0xff, 0x4e, 0x79, 0xf0, 0x3f, 0xe2, 0x2f, 0xc0, 0x73, 0xfa, 0x68, 0x85, 0x03,
	0x68, 0xd7, 0x37, 0xd7, 0xcd, 0x9a, 0x29, 0xfe, 0x1e, 0xf0, 0xf8, 0x4b, 0x18, 0x9f, 0xc9, 0x71,
	0x2a, 0xe5, 0x54, 0x86, 0x99, 0x2e, 0x06, 0xb8, 0x51, 0x57, 0x0c, 0x32, 0x2b, 0x75, 0xd5, 0x20,
	0xeb, 0x88, 0xef, 0x83, 0xe7, 0xf4, 0xd3, 0x8a, 0x3f, 0x07, 0x1c, 0xc9, 0x6f, 0xd2, 0x7a, 0xe7,
	0xcd, 0xe3, 0xed, 0x83, 0xe7, 0xe8, 0xb4, 0xe2, 0x8f, 0xa1, 0xb3, 0x4e, 0x4f, 0x92, 0x64, 0x5e,
	0x74, 0xda, 0xf8, 0x42, 0x0d, 0x5f, 0x7a, 0xb0, 0xdb, 0x2c, 0xd4, 0x8a, 0x3f, 0xa9, 0x32, 0xef,
	0x0a, 0x4b, 0xaf, 0x75, 0x9b, 0xf7, 0xa1, 0x6b, 0xd4, 0x6a, 0xc5, 0x8f, 0xa0, 0xfb, 0x56, 0x66,
	0xb7, 0x7c, 0xc5, 0x57, 0xe8, 0x99, 0x22, 0xad, 0x6e, 0xbf, 0x63, 0x7c, 0x04, 0x9d, 0x38, 0xfd,
	0xf0, 0xb9, 0x36, 0xd6, 0x6f, 0x95, 0xc7, 0x66, 0x92, 0xa3, 0x79, 0x57, 0xb1, 0x4e, 0x3e, 0x86,
	0xbe, 0x95, 0xd3, 0x0a, 0x9f, 0x02, 0x6c, 0x32, 0x3e, 0x1d, 0xb4, 0x0e, 0xda, 0xc3, 0xbe, 0xb0,
	0xe7, 0x9c, 0x34, 0x8a, 0x86, 0xbf, 0x5a, 0xd0, 0xaf, 0xc3, 0xd3, 0xe9, 0x9a, 0x64, 0x7c, 0x0d,
	0x5d, 0x8b, 0x3d, 0xf4, 0x84, 0x4b, 0x75, 0xb0, 0x27, 0xb6, 0x20, 0xca, 0x49, 0xa9, 0x37, 0x91,
	0x29, 0xf4, 0x0e, 0x94, 0x85, 0x7e, 0x0b, 0x59, 0xa5, 0xde, 0x62, 0x04, 0x3d, 0xe1, 0xd2, 0x16,
	0xec, 0x89, 0x6d, 0x28, 0x11, 0x3c, 0x04, 0xd8, 0x30, 0x82, 0xbb, 0xc2, 0x20, 0x2b, 0xe8, 0x0a,
	0x0b, 0x20, 0x82, 0x43, 0x68, 0x37, 0xb0, 0xc0, 0xaa, 0xa2, 0x02, 0x2a, 0xe8, 0x09, 0x9b, 0x1a,
	0x82, 0xcf, 0xe0, 0x7e, 0xd3, 0x5a, 0xec, 0x59, 0x4e, 0x9f, 0x07, 0xae, 0xf7, 0x9c, 0xe0, 0x4b,
	0xe8, 0x18, 0x9b, 0x43, 0xb3, 0xaa, 0xf4, 0x05, 0x85, 0xb3, 0x5c, 0x4e, 0xde, 0xbc, 0x5a, 0x2c,
	0x19, 0xb9, 0x5c, 0x32, 0x72, 0xb5, 0x64, 0xf4, 0x7b, 0xce, 0xe8, 0xcf, 0x9c, 0xd1, 0xdf, 0x39,
	0xa3, 0x8b, 0x9c, 0xd1, 0x3f, 0x39, 0xa3, 0x7f, 0x73, 0x46, 0xae, 0x72, 0x46, 0x7f, 0xac, 0x18,
	0x59, 0xac, 0x18, 0xb9, 0x5c, 0x31, 0xf2, 0xb1, 0x15, 0xaa, 0xe8, 0xd3, 0x4e, 0xf9, 0x37, 0x1d,
	0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x56, 0x10, 0x65, 0x5b, 0xba, 0x04, 0x00, 0x00,
}

func (this *CreateScreeningReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateScreeningReq)
	if !ok {
		that2, ok := that.(CreateScreeningReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MovieID != that1.MovieID {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	return true
}
func (this *CreateScreeningResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateScreeningResp)
	if !ok {
		that2, ok := that.(CreateScreeningResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScreeningID != that1.ScreeningID {
		return false
	}
	return true
}
func (this *ChangeFreeSeatsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeFreeSeatsReq)
	if !ok {
		that2, ok := that.(ChangeFreeSeatsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScreeningID != that1.ScreeningID {
		return false
	}
	if this.Change != that1.Change {
		return false
	}
	return true
}
func (this *ChangeFreeSeatsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeFreeSeatsResp)
	if !ok {
		that2, ok := that.(ChangeFreeSeatsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteScreeningReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteScreeningReq)
	if !ok {
		that2, ok := that.(DeleteScreeningReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScreeningID != that1.ScreeningID {
		return false
	}
	return true
}
func (this *DeleteScreeningResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteScreeningResp)
	if !ok {
		that2, ok := that.(DeleteScreeningResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteRoomReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRoomReq)
	if !ok {
		that2, ok := that.(DeleteRoomReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	return true
}
func (this *DeleteRoomResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRoomResp)
	if !ok {
		that2, ok := that.(DeleteRoomResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteMovieReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteMovieReq)
	if !ok {
		that2, ok := that.(DeleteMovieReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MovieID != that1.MovieID {
		return false
	}
	return true
}
func (this *DeleteMovieResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteMovieResp)
	if !ok {
		that2, ok := that.(DeleteMovieResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetScreeningReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetScreeningReq)
	if !ok {
		that2, ok := that.(GetScreeningReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScreeningID != that1.ScreeningID {
		return false
	}
	return true
}
func (this *GetScreeningResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetScreeningResp)
	if !ok {
		that2, ok := that.(GetScreeningResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MovieID != that1.MovieID {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if this.NrOfFreeSeats != that1.NrOfFreeSeats {
		return false
	}
	return true
}
func (this *GetScreeningsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetScreeningsReq)
	if !ok {
		that2, ok := that.(GetScreeningsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetScreeningsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetScreeningsResp)
	if !ok {
		that2, ok := that.(GetScreeningsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Screenings) != len(that1.Screenings) {
		return false
	}
	for i := range this.Screenings {
		if !this.Screenings[i].Equal(that1.Screenings[i]) {
			return false
		}
	}
	return true
}
func (this *CreateScreeningReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.CreateScreeningReq{")
	s = append(s, "MovieID: "+fmt.Sprintf("%#v", this.MovieID)+",\n")
	s = append(s, "RoomID: "+fmt.Sprintf("%#v", this.RoomID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateScreeningResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.CreateScreeningResp{")
	s = append(s, "ScreeningID: "+fmt.Sprintf("%#v", this.ScreeningID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChangeFreeSeatsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.ChangeFreeSeatsReq{")
	s = append(s, "ScreeningID: "+fmt.Sprintf("%#v", this.ScreeningID)+",\n")
	s = append(s, "Change: "+fmt.Sprintf("%#v", this.Change)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChangeFreeSeatsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.ChangeFreeSeatsResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteScreeningReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.DeleteScreeningReq{")
	s = append(s, "ScreeningID: "+fmt.Sprintf("%#v", this.ScreeningID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteScreeningResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.DeleteScreeningResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteRoomReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.DeleteRoomReq{")
	s = append(s, "RoomID: "+fmt.Sprintf("%#v", this.RoomID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteRoomResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.DeleteRoomResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteMovieReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.DeleteMovieReq{")
	s = append(s, "MovieID: "+fmt.Sprintf("%#v", this.MovieID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteMovieResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.DeleteMovieResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetScreeningReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetScreeningReq{")
	s = append(s, "ScreeningID: "+fmt.Sprintf("%#v", this.ScreeningID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetScreeningResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.GetScreeningResp{")
	s = append(s, "MovieID: "+fmt.Sprintf("%#v", this.MovieID)+",\n")
	s = append(s, "RoomID: "+fmt.Sprintf("%#v", this.RoomID)+",\n")
	s = append(s, "NrOfFreeSeats: "+fmt.Sprintf("%#v", this.NrOfFreeSeats)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetScreeningsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.GetScreeningsReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetScreeningsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetScreeningsResp{")
	if this.Screenings != nil {
		s = append(s, "Screenings: "+fmt.Sprintf("%#v", this.Screenings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringScreeningService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CreateScreeningReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateScreeningReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateScreeningReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoomID != 0 {
		i = encodeVarintScreeningService(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x10
	}
	if m.MovieID != 0 {
		i = encodeVarintScreeningService(dAtA, i, uint64(m.MovieID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateScreeningResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateScreeningResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateScreeningResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScreeningID != 0 {
		i = encodeVarintScreeningService(dAtA, i, uint64(m.ScreeningID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChangeFreeSeatsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeFreeSeatsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeFreeSeatsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != 0 {
		i = encodeVarintScreeningService(dAtA, i, uint64(m.Change))
		i--
		dAtA[i] = 0x10
	}
	if m.ScreeningID != 0 {
		i = encodeVarintScreeningService(dAtA, i, uint64(m.ScreeningID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChangeFreeSeatsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeFreeSeatsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeFreeSeatsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteScreeningReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteScreeningReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteScreeningReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScreeningID != 0 {
		i = encodeVarintScreeningService(dAtA, i, uint64(m.ScreeningID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteScreeningResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteScreeningResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteScreeningResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteRoomReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRoomReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRoomReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoomID != 0 {
		i = encodeVarintScreeningService(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRoomResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRoomResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRoomResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteMovieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMovieReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMovieReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MovieID != 0 {
		i = encodeVarintScreeningService(dAtA, i, uint64(m.MovieID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMovieResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMovieResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMovieResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetScreeningReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScreeningReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetScreeningReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScreeningID != 0 {
		i = encodeVarintScreeningService(dAtA, i, uint64(m.ScreeningID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetScreeningResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScreeningResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetScreeningResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NrOfFreeSeats != 0 {
		i = encodeVarintScreeningService(dAtA, i, uint64(m.NrOfFreeSeats))
		i--
		dAtA[i] = 0x18
	}
	if m.RoomID != 0 {
		i = encodeVarintScreeningService(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x10
	}
	if m.MovieID != 0 {
		i = encodeVarintScreeningService(dAtA, i, uint64(m.MovieID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetScreeningsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScreeningsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetScreeningsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetScreeningsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScreeningsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetScreeningsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Screenings) > 0 {
		for iNdEx := len(m.Screenings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Screenings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintScreeningService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintScreeningService(dAtA []byte, offset int, v uint64) int {
	offset -= sovScreeningService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateScreeningReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MovieID != 0 {
		n += 1 + sovScreeningService(uint64(m.MovieID))
	}
	if m.RoomID != 0 {
		n += 1 + sovScreeningService(uint64(m.RoomID))
	}
	return n
}

func (m *CreateScreeningResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScreeningID != 0 {
		n += 1 + sovScreeningService(uint64(m.ScreeningID))
	}
	return n
}

func (m *ChangeFreeSeatsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScreeningID != 0 {
		n += 1 + sovScreeningService(uint64(m.ScreeningID))
	}
	if m.Change != 0 {
		n += 1 + sovScreeningService(uint64(m.Change))
	}
	return n
}

func (m *ChangeFreeSeatsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteScreeningReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScreeningID != 0 {
		n += 1 + sovScreeningService(uint64(m.ScreeningID))
	}
	return n
}

func (m *DeleteScreeningResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteRoomReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomID != 0 {
		n += 1 + sovScreeningService(uint64(m.RoomID))
	}
	return n
}

func (m *DeleteRoomResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteMovieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MovieID != 0 {
		n += 1 + sovScreeningService(uint64(m.MovieID))
	}
	return n
}

func (m *DeleteMovieResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetScreeningReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScreeningID != 0 {
		n += 1 + sovScreeningService(uint64(m.ScreeningID))
	}
	return n
}

func (m *GetScreeningResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MovieID != 0 {
		n += 1 + sovScreeningService(uint64(m.MovieID))
	}
	if m.RoomID != 0 {
		n += 1 + sovScreeningService(uint64(m.RoomID))
	}
	if m.NrOfFreeSeats != 0 {
		n += 1 + sovScreeningService(uint64(m.NrOfFreeSeats))
	}
	return n
}

func (m *GetScreeningsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetScreeningsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Screenings) > 0 {
		for _, e := range m.Screenings {
			l = e.Size()
			n += 1 + l + sovScreeningService(uint64(l))
		}
	}
	return n
}

func sovScreeningService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScreeningService(x uint64) (n int) {
	return sovScreeningService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateScreeningReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateScreeningReq{`,
		`MovieID:` + fmt.Sprintf("%v", this.MovieID) + `,`,
		`RoomID:` + fmt.Sprintf("%v", this.RoomID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateScreeningResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateScreeningResp{`,
		`ScreeningID:` + fmt.Sprintf("%v", this.ScreeningID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangeFreeSeatsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeFreeSeatsReq{`,
		`ScreeningID:` + fmt.Sprintf("%v", this.ScreeningID) + `,`,
		`Change:` + fmt.Sprintf("%v", this.Change) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangeFreeSeatsResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeFreeSeatsResp{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteScreeningReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteScreeningReq{`,
		`ScreeningID:` + fmt.Sprintf("%v", this.ScreeningID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteScreeningResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteScreeningResp{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRoomReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRoomReq{`,
		`RoomID:` + fmt.Sprintf("%v", this.RoomID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRoomResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRoomResp{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteMovieReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteMovieReq{`,
		`MovieID:` + fmt.Sprintf("%v", this.MovieID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteMovieResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteMovieResp{`,
		`}`,
	}, "")
	return s
}
func (this *GetScreeningReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetScreeningReq{`,
		`ScreeningID:` + fmt.Sprintf("%v", this.ScreeningID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetScreeningResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetScreeningResp{`,
		`MovieID:` + fmt.Sprintf("%v", this.MovieID) + `,`,
		`RoomID:` + fmt.Sprintf("%v", this.RoomID) + `,`,
		`NrOfFreeSeats:` + fmt.Sprintf("%v", this.NrOfFreeSeats) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetScreeningsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetScreeningsReq{`,
		`}`,
	}, "")
	return s
}
func (this *GetScreeningsResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForScreenings := "[]*GetScreeningResp{"
	for _, f := range this.Screenings {
		repeatedStringForScreenings += strings.Replace(f.String(), "GetScreeningResp", "GetScreeningResp", 1) + ","
	}
	repeatedStringForScreenings += "}"
	s := strings.Join([]string{`&GetScreeningsResp{`,
		`Screenings:` + repeatedStringForScreenings + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringScreeningService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateScreeningReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateScreeningReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateScreeningReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovieID", wireType)
			}
			m.MovieID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MovieID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScreeningService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateScreeningResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateScreeningResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateScreeningResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreeningID", wireType)
			}
			m.ScreeningID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreeningID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScreeningService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeFreeSeatsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeFreeSeatsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeFreeSeatsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreeningID", wireType)
			}
			m.ScreeningID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreeningID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			m.Change = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Change |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScreeningService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeFreeSeatsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeFreeSeatsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeFreeSeatsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipScreeningService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteScreeningReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteScreeningReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteScreeningReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreeningID", wireType)
			}
			m.ScreeningID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreeningID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScreeningService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteScreeningResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteScreeningResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteScreeningResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipScreeningService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRoomReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRoomReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRoomReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScreeningService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRoomResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRoomResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRoomResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipScreeningService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMovieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMovieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMovieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovieID", wireType)
			}
			m.MovieID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MovieID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScreeningService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMovieResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMovieResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMovieResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipScreeningService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScreeningReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScreeningReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScreeningReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreeningID", wireType)
			}
			m.ScreeningID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreeningID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScreeningService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScreeningResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScreeningResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScreeningResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovieID", wireType)
			}
			m.MovieID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MovieID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrOfFreeSeats", wireType)
			}
			m.NrOfFreeSeats = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrOfFreeSeats |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScreeningService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScreeningsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScreeningsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScreeningsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipScreeningService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScreeningsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScreeningsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScreeningsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Screenings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScreeningService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScreeningService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Screenings = append(m.Screenings, &GetScreeningResp{})
			if err := m.Screenings[len(m.Screenings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScreeningService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScreeningService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScreeningService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScreeningService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScreeningService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScreeningService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScreeningService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScreeningService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScreeningService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScreeningService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScreeningService = fmt.Errorf("proto: unexpected end of group")
)
