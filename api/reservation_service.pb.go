// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/reservation_service.proto

package api

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateReservationReq struct {
	UserID      int32 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ScreeningID int32 `protobuf:"varint,2,opt,name=screeningID,proto3" json:"screeningID,omitempty"`
	NrOfSeats   int32 `protobuf:"varint,3,opt,name=nrOfSeats,proto3" json:"nrOfSeats,omitempty"`
}

func (m *CreateReservationReq) Reset()      { *m = CreateReservationReq{} }
func (*CreateReservationReq) ProtoMessage() {}
func (*CreateReservationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c598de4266c0f4, []int{0}
}
func (m *CreateReservationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateReservationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateReservationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateReservationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateReservationReq.Merge(m, src)
}
func (m *CreateReservationReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateReservationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateReservationReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateReservationReq proto.InternalMessageInfo

func (m *CreateReservationReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *CreateReservationReq) GetScreeningID() int32 {
	if m != nil {
		return m.ScreeningID
	}
	return 0
}

func (m *CreateReservationReq) GetNrOfSeats() int32 {
	if m != nil {
		return m.NrOfSeats
	}
	return 0
}

type CreateReservationResp struct {
	ReservationID int32 `protobuf:"varint,1,opt,name=reservationID,proto3" json:"reservationID,omitempty"`
}

func (m *CreateReservationResp) Reset()      { *m = CreateReservationResp{} }
func (*CreateReservationResp) ProtoMessage() {}
func (*CreateReservationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c598de4266c0f4, []int{1}
}
func (m *CreateReservationResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateReservationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateReservationResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateReservationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateReservationResp.Merge(m, src)
}
func (m *CreateReservationResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateReservationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateReservationResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateReservationResp proto.InternalMessageInfo

func (m *CreateReservationResp) GetReservationID() int32 {
	if m != nil {
		return m.ReservationID
	}
	return 0
}

type ActivateReservationReq struct {
	ReservationID int32 `protobuf:"varint,1,opt,name=reservationID,proto3" json:"reservationID,omitempty"`
}

func (m *ActivateReservationReq) Reset()      { *m = ActivateReservationReq{} }
func (*ActivateReservationReq) ProtoMessage() {}
func (*ActivateReservationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c598de4266c0f4, []int{2}
}
func (m *ActivateReservationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivateReservationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivateReservationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivateReservationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivateReservationReq.Merge(m, src)
}
func (m *ActivateReservationReq) XXX_Size() int {
	return m.Size()
}
func (m *ActivateReservationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivateReservationReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActivateReservationReq proto.InternalMessageInfo

func (m *ActivateReservationReq) GetReservationID() int32 {
	if m != nil {
		return m.ReservationID
	}
	return 0
}

type ActivateReservationResp struct {
}

func (m *ActivateReservationResp) Reset()      { *m = ActivateReservationResp{} }
func (*ActivateReservationResp) ProtoMessage() {}
func (*ActivateReservationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c598de4266c0f4, []int{3}
}
func (m *ActivateReservationResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivateReservationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivateReservationResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivateReservationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivateReservationResp.Merge(m, src)
}
func (m *ActivateReservationResp) XXX_Size() int {
	return m.Size()
}
func (m *ActivateReservationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivateReservationResp.DiscardUnknown(m)
}

var xxx_messageInfo_ActivateReservationResp proto.InternalMessageInfo

type DeleteReservationReq struct {
	ReservationID int32 `protobuf:"varint,1,opt,name=reservationID,proto3" json:"reservationID,omitempty"`
}

func (m *DeleteReservationReq) Reset()      { *m = DeleteReservationReq{} }
func (*DeleteReservationReq) ProtoMessage() {}
func (*DeleteReservationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c598de4266c0f4, []int{4}
}
func (m *DeleteReservationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteReservationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteReservationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteReservationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReservationReq.Merge(m, src)
}
func (m *DeleteReservationReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteReservationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReservationReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReservationReq proto.InternalMessageInfo

func (m *DeleteReservationReq) GetReservationID() int32 {
	if m != nil {
		return m.ReservationID
	}
	return 0
}

type DeleteReservationResp struct {
}

func (m *DeleteReservationResp) Reset()      { *m = DeleteReservationResp{} }
func (*DeleteReservationResp) ProtoMessage() {}
func (*DeleteReservationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c598de4266c0f4, []int{5}
}
func (m *DeleteReservationResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteReservationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteReservationResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteReservationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReservationResp.Merge(m, src)
}
func (m *DeleteReservationResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteReservationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReservationResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReservationResp proto.InternalMessageInfo

type GetReservationReq struct {
	ReservationID int32 `protobuf:"varint,1,opt,name=reservationID,proto3" json:"reservationID,omitempty"`
}

func (m *GetReservationReq) Reset()      { *m = GetReservationReq{} }
func (*GetReservationReq) ProtoMessage() {}
func (*GetReservationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c598de4266c0f4, []int{6}
}
func (m *GetReservationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReservationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReservationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReservationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReservationReq.Merge(m, src)
}
func (m *GetReservationReq) XXX_Size() int {
	return m.Size()
}
func (m *GetReservationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReservationReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetReservationReq proto.InternalMessageInfo

func (m *GetReservationReq) GetReservationID() int32 {
	if m != nil {
		return m.ReservationID
	}
	return 0
}

type GetReservationResp struct {
	UserID      int32 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ScreeningID int32 `protobuf:"varint,2,opt,name=screeningID,proto3" json:"screeningID,omitempty"`
	NrOfSeats   int32 `protobuf:"varint,3,opt,name=nrOfSeats,proto3" json:"nrOfSeats,omitempty"`
	Active      bool  `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *GetReservationResp) Reset()      { *m = GetReservationResp{} }
func (*GetReservationResp) ProtoMessage() {}
func (*GetReservationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c598de4266c0f4, []int{7}
}
func (m *GetReservationResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReservationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReservationResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReservationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReservationResp.Merge(m, src)
}
func (m *GetReservationResp) XXX_Size() int {
	return m.Size()
}
func (m *GetReservationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReservationResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetReservationResp proto.InternalMessageInfo

func (m *GetReservationResp) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *GetReservationResp) GetScreeningID() int32 {
	if m != nil {
		return m.ScreeningID
	}
	return 0
}

func (m *GetReservationResp) GetNrOfSeats() int32 {
	if m != nil {
		return m.NrOfSeats
	}
	return 0
}

func (m *GetReservationResp) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type GetReservationsReq struct {
}

func (m *GetReservationsReq) Reset()      { *m = GetReservationsReq{} }
func (*GetReservationsReq) ProtoMessage() {}
func (*GetReservationsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c598de4266c0f4, []int{8}
}
func (m *GetReservationsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReservationsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReservationsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReservationsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReservationsReq.Merge(m, src)
}
func (m *GetReservationsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetReservationsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReservationsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetReservationsReq proto.InternalMessageInfo

type GetReservationsResp struct {
	Reservations []*GetReservationResp `protobuf:"bytes,1,rep,name=Reservations,proto3" json:"Reservations,omitempty"`
}

func (m *GetReservationsResp) Reset()      { *m = GetReservationsResp{} }
func (*GetReservationsResp) ProtoMessage() {}
func (*GetReservationsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c598de4266c0f4, []int{9}
}
func (m *GetReservationsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReservationsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReservationsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReservationsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReservationsResp.Merge(m, src)
}
func (m *GetReservationsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetReservationsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReservationsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetReservationsResp proto.InternalMessageInfo

func (m *GetReservationsResp) GetReservations() []*GetReservationResp {
	if m != nil {
		return m.Reservations
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateReservationReq)(nil), "CreateReservationReq")
	proto.RegisterType((*CreateReservationResp)(nil), "CreateReservationResp")
	proto.RegisterType((*ActivateReservationReq)(nil), "ActivateReservationReq")
	proto.RegisterType((*ActivateReservationResp)(nil), "ActivateReservationResp")
	proto.RegisterType((*DeleteReservationReq)(nil), "DeleteReservationReq")
	proto.RegisterType((*DeleteReservationResp)(nil), "DeleteReservationResp")
	proto.RegisterType((*GetReservationReq)(nil), "GetReservationReq")
	proto.RegisterType((*GetReservationResp)(nil), "GetReservationResp")
	proto.RegisterType((*GetReservationsReq)(nil), "GetReservationsReq")
	proto.RegisterType((*GetReservationsResp)(nil), "GetReservationsResp")
}

func init() { proto.RegisterFile("api/reservation_service.proto", fileDescriptor_96c598de4266c0f4) }

var fileDescriptor_96c598de4266c0f4 = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcb, 0xca, 0xd3, 0x40,
	0x18, 0x9d, 0xf9, 0xab, 0x45, 0xbf, 0x7a, 0xa1, 0x5f, 0x2e, 0x8d, 0x41, 0x87, 0x30, 0xb8, 0xe8,
	0x6a, 0x84, 0xba, 0x90, 0xa2, 0x16, 0xd4, 0x80, 0xd4, 0x85, 0x42, 0xba, 0x73, 0x53, 0x62, 0x19,
	0x25, 0x20, 0xe9, 0x34, 0x13, 0xbb, 0x76, 0xe1, 0x03, 0xf8, 0x18, 0x3e, 0x8a, 0xcb, 0x2e, 0xbb,
	0xb4, 0xe9, 0x46, 0x5c, 0xf5, 0x11, 0x24, 0xb5, 0xd8, 0x34, 0x19, 0x41, 0x0a, 0xff, 0x2e, 0x73,
	0xe6, 0xbb, 0x9c, 0x9c, 0x73, 0x18, 0xb8, 0x17, 0xab, 0xe4, 0x41, 0x26, 0xb5, 0xcc, 0x96, 0x71,
	0x9e, 0xcc, 0xd3, 0x69, 0xf9, 0x95, 0xcc, 0xa4, 0x50, 0xd9, 0x3c, 0x9f, 0xf3, 0x14, 0xec, 0x17,
	0x99, 0x8c, 0x73, 0x19, 0x1d, 0x4b, 0x22, 0xb9, 0x40, 0x17, 0xda, 0x9f, 0xb4, 0xcc, 0xc6, 0xa1,
	0x47, 0x03, 0xda, 0xbf, 0x1a, 0x1d, 0x4e, 0x18, 0x40, 0x47, 0xcf, 0x32, 0x29, 0xd3, 0x24, 0xfd,
	0x30, 0x0e, 0xbd, 0x8b, 0xfd, 0x65, 0x15, 0xc2, 0xbb, 0x70, 0x3d, 0xcd, 0xde, 0xbc, 0x9f, 0xc8,
	0x38, 0xd7, 0x5e, 0x6b, 0x7f, 0x7f, 0x04, 0xf8, 0x53, 0x70, 0x0c, 0xfb, 0xb4, 0xc2, 0xfb, 0x70,
	0xb3, 0xc2, 0xf2, 0xef, 0xde, 0x53, 0x90, 0x8f, 0xc0, 0x7d, 0x36, 0xcb, 0x93, 0x65, 0x93, 0xf0,
	0xff, 0xf5, 0xdf, 0x81, 0x9e, 0xb1, 0x5f, 0x2b, 0xfe, 0x04, 0xec, 0x50, 0x7e, 0x94, 0x67, 0x0e,
	0xee, 0x81, 0x63, 0xe8, 0xd6, 0x8a, 0x0f, 0xa1, 0xfb, 0x52, 0xe6, 0x67, 0xcd, 0xfc, 0x42, 0x01,
	0xeb, 0xbd, 0x5a, 0x5d, 0x96, 0x35, 0xe5, 0xdc, 0xb8, 0xd4, 0x46, 0x7a, 0x57, 0x02, 0xda, 0xbf,
	0x16, 0x1d, 0x4e, 0xdc, 0xae, 0xb3, 0xd0, 0x91, 0x5c, 0xf0, 0xd7, 0x60, 0x35, 0x50, 0xad, 0xf0,
	0x11, 0xdc, 0xa8, 0x62, 0x1e, 0x0d, 0x5a, 0xfd, 0xce, 0xc0, 0x12, 0xcd, 0xff, 0x88, 0x4e, 0x0a,
	0x07, 0xbf, 0x2e, 0xc0, 0xaa, 0x00, 0xd3, 0xc9, 0x9f, 0x98, 0x62, 0x08, 0xdd, 0x46, 0x60, 0xd0,
	0x11, 0xa6, 0xd0, 0xfa, 0xae, 0x30, 0x66, 0x8b, 0x13, 0x7c, 0x05, 0x96, 0xc1, 0x77, 0xec, 0x09,
	0x73, 0x9a, 0x7c, 0x4f, 0xfc, 0x2b, 0x26, 0xa4, 0x64, 0xd4, 0xb0, 0x1a, 0x1d, 0x61, 0x0a, 0x8f,
	0xef, 0x0a, 0x73, 0x2a, 0x08, 0x3e, 0x86, 0x5b, 0xa7, 0x9a, 0x20, 0x36, 0x44, 0x5a, 0xf8, 0x26,
	0xe1, 0x38, 0xc1, 0x11, 0xdc, 0xae, 0x89, 0x8f, 0xf5, 0xca, 0xd2, 0x24, 0xdf, 0x16, 0x06, 0x8f,
	0x38, 0x79, 0x3e, 0x5c, 0x6d, 0x18, 0x59, 0x6f, 0x18, 0xd9, 0x6d, 0x18, 0xfd, 0x5c, 0x30, 0xfa,
	0xad, 0x60, 0xf4, 0x7b, 0xc1, 0xe8, 0xaa, 0x60, 0xf4, 0x47, 0xc1, 0xe8, 0xcf, 0x82, 0x91, 0x5d,
	0xc1, 0xe8, 0xd7, 0x2d, 0x23, 0xab, 0x2d, 0x23, 0xeb, 0x2d, 0x23, 0x6f, 0x5b, 0xb1, 0x4a, 0xde,
	0xb5, 0xf7, 0xef, 0xc6, 0xc3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xcd, 0xee, 0x66, 0x58,
	0x04, 0x00, 0x00,
}

func (this *CreateReservationReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateReservationReq)
	if !ok {
		that2, ok := that.(CreateReservationReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if this.ScreeningID != that1.ScreeningID {
		return false
	}
	if this.NrOfSeats != that1.NrOfSeats {
		return false
	}
	return true
}
func (this *CreateReservationResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateReservationResp)
	if !ok {
		that2, ok := that.(CreateReservationResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReservationID != that1.ReservationID {
		return false
	}
	return true
}
func (this *ActivateReservationReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivateReservationReq)
	if !ok {
		that2, ok := that.(ActivateReservationReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReservationID != that1.ReservationID {
		return false
	}
	return true
}
func (this *ActivateReservationResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivateReservationResp)
	if !ok {
		that2, ok := that.(ActivateReservationResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteReservationReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteReservationReq)
	if !ok {
		that2, ok := that.(DeleteReservationReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReservationID != that1.ReservationID {
		return false
	}
	return true
}
func (this *DeleteReservationResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteReservationResp)
	if !ok {
		that2, ok := that.(DeleteReservationResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetReservationReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReservationReq)
	if !ok {
		that2, ok := that.(GetReservationReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReservationID != that1.ReservationID {
		return false
	}
	return true
}
func (this *GetReservationResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReservationResp)
	if !ok {
		that2, ok := that.(GetReservationResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if this.ScreeningID != that1.ScreeningID {
		return false
	}
	if this.NrOfSeats != that1.NrOfSeats {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	return true
}
func (this *GetReservationsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReservationsReq)
	if !ok {
		that2, ok := that.(GetReservationsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetReservationsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReservationsResp)
	if !ok {
		that2, ok := that.(GetReservationsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Reservations) != len(that1.Reservations) {
		return false
	}
	for i := range this.Reservations {
		if !this.Reservations[i].Equal(that1.Reservations[i]) {
			return false
		}
	}
	return true
}
func (this *CreateReservationReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.CreateReservationReq{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "ScreeningID: "+fmt.Sprintf("%#v", this.ScreeningID)+",\n")
	s = append(s, "NrOfSeats: "+fmt.Sprintf("%#v", this.NrOfSeats)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateReservationResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.CreateReservationResp{")
	s = append(s, "ReservationID: "+fmt.Sprintf("%#v", this.ReservationID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivateReservationReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.ActivateReservationReq{")
	s = append(s, "ReservationID: "+fmt.Sprintf("%#v", this.ReservationID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivateReservationResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.ActivateReservationResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteReservationReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.DeleteReservationReq{")
	s = append(s, "ReservationID: "+fmt.Sprintf("%#v", this.ReservationID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteReservationResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.DeleteReservationResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReservationReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetReservationReq{")
	s = append(s, "ReservationID: "+fmt.Sprintf("%#v", this.ReservationID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReservationResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api.GetReservationResp{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "ScreeningID: "+fmt.Sprintf("%#v", this.ScreeningID)+",\n")
	s = append(s, "NrOfSeats: "+fmt.Sprintf("%#v", this.NrOfSeats)+",\n")
	s = append(s, "Active: "+fmt.Sprintf("%#v", this.Active)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReservationsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.GetReservationsReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReservationsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetReservationsResp{")
	if this.Reservations != nil {
		s = append(s, "Reservations: "+fmt.Sprintf("%#v", this.Reservations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringReservationService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CreateReservationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateReservationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateReservationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NrOfSeats != 0 {
		i = encodeVarintReservationService(dAtA, i, uint64(m.NrOfSeats))
		i--
		dAtA[i] = 0x18
	}
	if m.ScreeningID != 0 {
		i = encodeVarintReservationService(dAtA, i, uint64(m.ScreeningID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintReservationService(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateReservationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateReservationResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateReservationResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReservationID != 0 {
		i = encodeVarintReservationService(dAtA, i, uint64(m.ReservationID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivateReservationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivateReservationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivateReservationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReservationID != 0 {
		i = encodeVarintReservationService(dAtA, i, uint64(m.ReservationID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivateReservationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivateReservationResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivateReservationResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteReservationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteReservationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteReservationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReservationID != 0 {
		i = encodeVarintReservationService(dAtA, i, uint64(m.ReservationID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteReservationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteReservationResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteReservationResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetReservationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReservationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReservationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReservationID != 0 {
		i = encodeVarintReservationService(dAtA, i, uint64(m.ReservationID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetReservationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReservationResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReservationResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.NrOfSeats != 0 {
		i = encodeVarintReservationService(dAtA, i, uint64(m.NrOfSeats))
		i--
		dAtA[i] = 0x18
	}
	if m.ScreeningID != 0 {
		i = encodeVarintReservationService(dAtA, i, uint64(m.ScreeningID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintReservationService(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetReservationsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReservationsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReservationsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetReservationsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReservationsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReservationsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reservations) > 0 {
		for iNdEx := len(m.Reservations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reservations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReservationService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintReservationService(dAtA []byte, offset int, v uint64) int {
	offset -= sovReservationService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateReservationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovReservationService(uint64(m.UserID))
	}
	if m.ScreeningID != 0 {
		n += 1 + sovReservationService(uint64(m.ScreeningID))
	}
	if m.NrOfSeats != 0 {
		n += 1 + sovReservationService(uint64(m.NrOfSeats))
	}
	return n
}

func (m *CreateReservationResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReservationID != 0 {
		n += 1 + sovReservationService(uint64(m.ReservationID))
	}
	return n
}

func (m *ActivateReservationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReservationID != 0 {
		n += 1 + sovReservationService(uint64(m.ReservationID))
	}
	return n
}

func (m *ActivateReservationResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteReservationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReservationID != 0 {
		n += 1 + sovReservationService(uint64(m.ReservationID))
	}
	return n
}

func (m *DeleteReservationResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetReservationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReservationID != 0 {
		n += 1 + sovReservationService(uint64(m.ReservationID))
	}
	return n
}

func (m *GetReservationResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovReservationService(uint64(m.UserID))
	}
	if m.ScreeningID != 0 {
		n += 1 + sovReservationService(uint64(m.ScreeningID))
	}
	if m.NrOfSeats != 0 {
		n += 1 + sovReservationService(uint64(m.NrOfSeats))
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *GetReservationsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetReservationsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reservations) > 0 {
		for _, e := range m.Reservations {
			l = e.Size()
			n += 1 + l + sovReservationService(uint64(l))
		}
	}
	return n
}

func sovReservationService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReservationService(x uint64) (n int) {
	return sovReservationService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateReservationReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateReservationReq{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`ScreeningID:` + fmt.Sprintf("%v", this.ScreeningID) + `,`,
		`NrOfSeats:` + fmt.Sprintf("%v", this.NrOfSeats) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateReservationResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateReservationResp{`,
		`ReservationID:` + fmt.Sprintf("%v", this.ReservationID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivateReservationReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivateReservationReq{`,
		`ReservationID:` + fmt.Sprintf("%v", this.ReservationID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivateReservationResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivateReservationResp{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteReservationReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteReservationReq{`,
		`ReservationID:` + fmt.Sprintf("%v", this.ReservationID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteReservationResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteReservationResp{`,
		`}`,
	}, "")
	return s
}
func (this *GetReservationReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReservationReq{`,
		`ReservationID:` + fmt.Sprintf("%v", this.ReservationID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetReservationResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReservationResp{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`ScreeningID:` + fmt.Sprintf("%v", this.ScreeningID) + `,`,
		`NrOfSeats:` + fmt.Sprintf("%v", this.NrOfSeats) + `,`,
		`Active:` + fmt.Sprintf("%v", this.Active) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetReservationsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReservationsReq{`,
		`}`,
	}, "")
	return s
}
func (this *GetReservationsResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReservations := "[]*GetReservationResp{"
	for _, f := range this.Reservations {
		repeatedStringForReservations += strings.Replace(f.String(), "GetReservationResp", "GetReservationResp", 1) + ","
	}
	repeatedStringForReservations += "}"
	s := strings.Join([]string{`&GetReservationsResp{`,
		`Reservations:` + repeatedStringForReservations + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringReservationService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateReservationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateReservationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateReservationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreeningID", wireType)
			}
			m.ScreeningID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreeningID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrOfSeats", wireType)
			}
			m.NrOfSeats = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrOfSeats |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReservationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateReservationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateReservationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateReservationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationID", wireType)
			}
			m.ReservationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservationID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReservationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivateReservationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivateReservationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivateReservationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationID", wireType)
			}
			m.ReservationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservationID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReservationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivateReservationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivateReservationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivateReservationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReservationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteReservationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteReservationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteReservationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationID", wireType)
			}
			m.ReservationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservationID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReservationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteReservationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteReservationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteReservationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReservationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReservationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReservationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReservationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationID", wireType)
			}
			m.ReservationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservationID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReservationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReservationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReservationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReservationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreeningID", wireType)
			}
			m.ScreeningID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreeningID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrOfSeats", wireType)
			}
			m.NrOfSeats = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrOfSeats |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReservationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReservationsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReservationsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReservationsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReservationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReservationsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReservationsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReservationsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReservationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReservationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reservations = append(m.Reservations, &GetReservationResp{})
			if err := m.Reservations[len(m.Reservations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReservationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReservationService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReservationService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReservationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReservationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReservationService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReservationService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReservationService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReservationService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReservationService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReservationService = fmt.Errorf("proto: unexpected end of group")
)
