// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/movie_service.proto

package api

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateMovieReq struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CreateMovieReq) Reset()      { *m = CreateMovieReq{} }
func (*CreateMovieReq) ProtoMessage() {}
func (*CreateMovieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{0}
}
func (m *CreateMovieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMovieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMovieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMovieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMovieReq.Merge(m, src)
}
func (m *CreateMovieReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateMovieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMovieReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMovieReq proto.InternalMessageInfo

func (m *CreateMovieReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateMovieResp struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CreateMovieResp) Reset()      { *m = CreateMovieResp{} }
func (*CreateMovieResp) ProtoMessage() {}
func (*CreateMovieResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{1}
}
func (m *CreateMovieResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMovieResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMovieResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMovieResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMovieResp.Merge(m, src)
}
func (m *CreateMovieResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateMovieResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMovieResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMovieResp proto.InternalMessageInfo

func (m *CreateMovieResp) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteMovieReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteMovieReq) Reset()      { *m = DeleteMovieReq{} }
func (*DeleteMovieReq) ProtoMessage() {}
func (*DeleteMovieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{2}
}
func (m *DeleteMovieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMovieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMovieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMovieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMovieReq.Merge(m, src)
}
func (m *DeleteMovieReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMovieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMovieReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMovieReq proto.InternalMessageInfo

func (m *DeleteMovieReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteMovieResp struct {
}

func (m *DeleteMovieResp) Reset()      { *m = DeleteMovieResp{} }
func (*DeleteMovieResp) ProtoMessage() {}
func (*DeleteMovieResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{3}
}
func (m *DeleteMovieResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMovieResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMovieResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMovieResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMovieResp.Merge(m, src)
}
func (m *DeleteMovieResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMovieResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMovieResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMovieResp proto.InternalMessageInfo

type GetMovieReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetMovieReq) Reset()      { *m = GetMovieReq{} }
func (*GetMovieReq) ProtoMessage() {}
func (*GetMovieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{4}
}
func (m *GetMovieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMovieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMovieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMovieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMovieReq.Merge(m, src)
}
func (m *GetMovieReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMovieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMovieReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMovieReq proto.InternalMessageInfo

func (m *GetMovieReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetMovieResp struct {
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *GetMovieResp) Reset()      { *m = GetMovieResp{} }
func (*GetMovieResp) ProtoMessage() {}
func (*GetMovieResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{5}
}
func (m *GetMovieResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMovieResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMovieResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMovieResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMovieResp.Merge(m, src)
}
func (m *GetMovieResp) XXX_Size() int {
	return m.Size()
}
func (m *GetMovieResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMovieResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMovieResp proto.InternalMessageInfo

func (m *GetMovieResp) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type GetMoviesReq struct {
}

func (m *GetMoviesReq) Reset()      { *m = GetMoviesReq{} }
func (*GetMoviesReq) ProtoMessage() {}
func (*GetMoviesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{6}
}
func (m *GetMoviesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMoviesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMoviesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMoviesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMoviesReq.Merge(m, src)
}
func (m *GetMoviesReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMoviesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMoviesReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMoviesReq proto.InternalMessageInfo

type GetMoviesResp struct {
	Movies []*Tuple `protobuf:"bytes,1,rep,name=movies,proto3" json:"movies,omitempty"`
}

func (m *GetMoviesResp) Reset()      { *m = GetMoviesResp{} }
func (*GetMoviesResp) ProtoMessage() {}
func (*GetMoviesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{7}
}
func (m *GetMoviesResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMoviesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMoviesResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMoviesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMoviesResp.Merge(m, src)
}
func (m *GetMoviesResp) XXX_Size() int {
	return m.Size()
}
func (m *GetMoviesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMoviesResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMoviesResp proto.InternalMessageInfo

func (m *GetMoviesResp) GetMovies() []*Tuple {
	if m != nil {
		return m.Movies
	}
	return nil
}

type Tuple struct {
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Id    int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Tuple) Reset()      { *m = Tuple{} }
func (*Tuple) ProtoMessage() {}
func (*Tuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{8}
}
func (m *Tuple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tuple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tuple.Merge(m, src)
}
func (m *Tuple) XXX_Size() int {
	return m.Size()
}
func (m *Tuple) XXX_DiscardUnknown() {
	xxx_messageInfo_Tuple.DiscardUnknown(m)
}

var xxx_messageInfo_Tuple proto.InternalMessageInfo

func (m *Tuple) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Tuple) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateMovieReq)(nil), "CreateMovieReq")
	proto.RegisterType((*CreateMovieResp)(nil), "CreateMovieResp")
	proto.RegisterType((*DeleteMovieReq)(nil), "DeleteMovieReq")
	proto.RegisterType((*DeleteMovieResp)(nil), "DeleteMovieResp")
	proto.RegisterType((*GetMovieReq)(nil), "GetMovieReq")
	proto.RegisterType((*GetMovieResp)(nil), "GetMovieResp")
	proto.RegisterType((*GetMoviesReq)(nil), "GetMoviesReq")
	proto.RegisterType((*GetMoviesResp)(nil), "GetMoviesResp")
	proto.RegisterType((*Tuple)(nil), "Tuple")
}

func init() { proto.RegisterFile("api/movie_service.proto", fileDescriptor_937daf6a4ffecea5) }

var fileDescriptor_937daf6a4ffecea5 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xb1, 0x4e, 0x2a, 0x41,
	0x14, 0x86, 0x67, 0xe0, 0xb2, 0xb9, 0x1c, 0x60, 0x97, 0x3b, 0xb9, 0xc9, 0x25, 0x9b, 0xdc, 0x13,
	0x9c, 0x50, 0x60, 0xa2, 0x43, 0x82, 0x95, 0xad, 0x9a, 0x58, 0xd9, 0xac, 0x56, 0x36, 0x64, 0x95,
	0x29, 0x36, 0x01, 0x19, 0x98, 0x95, 0xda, 0x47, 0xf0, 0x31, 0x7c, 0x14, 0xcb, 0x2d, 0x29, 0x65,
	0x68, 0x2c, 0x79, 0x04, 0xc3, 0x00, 0xee, 0x2c, 0x89, 0xdd, 0x9c, 0x73, 0xfe, 0xf3, 0xe7, 0x3f,
	0x5f, 0x06, 0xfe, 0xc5, 0x2a, 0xe9, 0x8d, 0x27, 0xf3, 0x44, 0x0e, 0xb4, 0x9c, 0xcd, 0x93, 0x47,
	0x29, 0xd4, 0x6c, 0x92, 0x4e, 0x78, 0x07, 0xfc, 0xcb, 0x99, 0x8c, 0x53, 0x79, 0xb3, 0x19, 0x46,
	0x72, 0xca, 0x18, 0xfc, 0x7a, 0x8a, 0xc7, 0xb2, 0x45, 0xdb, 0xb4, 0x5b, 0x8d, 0xec, 0x9b, 0x1f,
	0x41, 0x50, 0x50, 0x69, 0xc5, 0x7c, 0x28, 0x25, 0x43, 0x2b, 0xaa, 0x44, 0xa5, 0x64, 0xc8, 0xdb,
	0xe0, 0x5f, 0xc9, 0x91, 0x74, 0x8c, 0x0e, 0x15, 0x7f, 0x20, 0x28, 0x28, 0xb4, 0xe2, 0xff, 0xa1,
	0x76, 0x2d, 0xd3, 0x1f, 0x37, 0x3a, 0x50, 0xcf, 0xc7, 0x5a, 0xb1, 0xbf, 0x50, 0x49, 0x93, 0x74,
	0x24, 0x5b, 0x9e, 0xcd, 0xb6, 0x2d, 0xb8, 0x9f, 0xab, 0x74, 0x24, 0xa7, 0xbc, 0x07, 0x0d, 0xa7,
	0xd6, 0x8a, 0x21, 0x78, 0xf6, 0x74, 0xdd, 0xa2, 0xed, 0x72, 0xb7, 0xd6, 0xf7, 0xc4, 0xdd, 0xb3,
	0x1a, 0xc9, 0x68, 0xd7, 0xe5, 0xa7, 0x50, 0xb1, 0x8d, 0xdc, 0x9f, 0x3a, 0xfe, 0xbb, 0x54, 0xa5,
	0x7d, 0xaa, 0x7e, 0x46, 0xa1, 0x61, 0xdd, 0x07, 0xb7, 0x5b, 0x94, 0xac, 0x0f, 0x35, 0x07, 0x0f,
	0x0b, 0x44, 0x11, 0x69, 0xd8, 0x14, 0x07, 0xf4, 0x38, 0xd9, 0xec, 0x38, 0x34, 0x58, 0x20, 0x8a,
	0xf4, 0xc2, 0xa6, 0x38, 0x84, 0x45, 0xd8, 0x31, 0xfc, 0xde, 0x5f, 0xc6, 0xea, 0xc2, 0x21, 0x17,
	0x36, 0x84, 0x0b, 0x8a, 0x13, 0x76, 0x02, 0xd5, 0x6f, 0x08, 0x2c, 0x9f, 0x6e, 0x00, 0x85, 0xbe,
	0x28, 0xf0, 0xe1, 0xe4, 0xe2, 0x3c, 0x5b, 0x22, 0x59, 0x2c, 0x91, 0xac, 0x97, 0x48, 0x5f, 0x0c,
	0xd2, 0x37, 0x83, 0xf4, 0xdd, 0x20, 0xcd, 0x0c, 0xd2, 0x0f, 0x83, 0xf4, 0xd3, 0x20, 0x59, 0x1b,
	0xa4, 0xaf, 0x2b, 0x24, 0xd9, 0x0a, 0xc9, 0x62, 0x85, 0xe4, 0xbe, 0x1c, 0xab, 0xe4, 0xc1, 0xb3,
	0xff, 0xe8, 0xec, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xbc, 0x7a, 0xe7, 0x62, 0x02, 0x00, 0x00,
}

func (this *CreateMovieReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateMovieReq)
	if !ok {
		that2, ok := that.(CreateMovieReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CreateMovieResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateMovieResp)
	if !ok {
		that2, ok := that.(CreateMovieResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *DeleteMovieReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteMovieReq)
	if !ok {
		that2, ok := that.(DeleteMovieReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *DeleteMovieResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteMovieResp)
	if !ok {
		that2, ok := that.(DeleteMovieResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetMovieReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMovieReq)
	if !ok {
		that2, ok := that.(GetMovieReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetMovieResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMovieResp)
	if !ok {
		that2, ok := that.(GetMovieResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *GetMoviesReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMoviesReq)
	if !ok {
		that2, ok := that.(GetMoviesReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetMoviesResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMoviesResp)
	if !ok {
		that2, ok := that.(GetMoviesResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Movies) != len(that1.Movies) {
		return false
	}
	for i := range this.Movies {
		if !this.Movies[i].Equal(that1.Movies[i]) {
			return false
		}
	}
	return true
}
func (this *Tuple) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tuple)
	if !ok {
		that2, ok := that.(Tuple)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *CreateMovieReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.CreateMovieReq{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateMovieResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.CreateMovieResp{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteMovieReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.DeleteMovieReq{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteMovieResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.DeleteMovieResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMovieReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetMovieReq{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMovieResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetMovieResp{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMoviesReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.GetMoviesReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMoviesResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetMoviesResp{")
	if this.Movies != nil {
		s = append(s, "Movies: "+fmt.Sprintf("%#v", this.Movies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tuple) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.Tuple{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMovieService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CreateMovieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMovieReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMovieReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMovieService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateMovieResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMovieResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMovieResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintMovieService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMovieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMovieReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMovieReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintMovieService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMovieResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMovieResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMovieResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMovieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMovieReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMovieReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintMovieService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMovieResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMovieResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMovieResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMovieService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}

func (m *GetMoviesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMoviesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMoviesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMoviesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMoviesResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMoviesResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Movies) > 0 {
		for iNdEx := len(m.Movies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Movies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMovieService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Tuple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tuple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tuple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintMovieService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMovieService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMovieService(dAtA []byte, offset int, v uint64) int {
	offset -= sovMovieService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateMovieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMovieService(uint64(l))
	}
	return n
}

func (m *CreateMovieResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMovieService(uint64(m.Id))
	}
	return n
}

func (m *DeleteMovieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMovieService(uint64(m.Id))
	}
	return n
}

func (m *DeleteMovieResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMovieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMovieService(uint64(m.Id))
	}
	return n
}

func (m *GetMovieResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMovieService(uint64(l))
	}
	return n
}

func (m *GetMoviesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMoviesResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Movies) > 0 {
		for _, e := range m.Movies {
			l = e.Size()
			n += 1 + l + sovMovieService(uint64(l))
		}
	}
	return n
}

func (m *Tuple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMovieService(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovMovieService(uint64(m.Id))
	}
	return n
}

func sovMovieService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMovieService(x uint64) (n int) {
	return sovMovieService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateMovieReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateMovieReq{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateMovieResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateMovieResp{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteMovieReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteMovieReq{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteMovieResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteMovieResp{`,
		`}`,
	}, "")
	return s
}
func (this *GetMovieReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMovieReq{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetMovieResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMovieResp{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetMoviesReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMoviesReq{`,
		`}`,
	}, "")
	return s
}
func (this *GetMoviesResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMovies := "[]*Tuple{"
	for _, f := range this.Movies {
		repeatedStringForMovies += strings.Replace(f.String(), "Tuple", "Tuple", 1) + ","
	}
	repeatedStringForMovies += "}"
	s := strings.Join([]string{`&GetMoviesResp{`,
		`Movies:` + repeatedStringForMovies + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tuple) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tuple{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMovieService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateMovieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMovieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMovieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMovieService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMovieService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMovieResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMovieResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMovieResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMovieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMovieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMovieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMovieResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMovieResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMovieResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMovieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMovieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMovieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMovieResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMovieResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMovieResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMovieService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMovieService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMoviesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMoviesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMoviesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMoviesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMoviesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMoviesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Movies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMovieService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMovieService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Movies = append(m.Movies, &Tuple{})
			if err := m.Movies[len(m.Movies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tuple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tuple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tuple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMovieService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMovieService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMovieService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMovieService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMovieService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMovieService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMovieService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMovieService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMovieService = fmt.Errorf("proto: unexpected end of group")
)
