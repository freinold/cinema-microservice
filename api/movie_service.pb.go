// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/movie_service.proto

package api

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateMovieMsg struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CreateMovieMsg) Reset()      { *m = CreateMovieMsg{} }
func (*CreateMovieMsg) ProtoMessage() {}
func (*CreateMovieMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{0}
}
func (m *CreateMovieMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMovieMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMovieMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMovieMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMovieMsg.Merge(m, src)
}
func (m *CreateMovieMsg) XXX_Size() int {
	return m.Size()
}
func (m *CreateMovieMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMovieMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMovieMsg proto.InternalMessageInfo

func (m *CreateMovieMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateMovieResponseMsg struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CreateMovieResponseMsg) Reset()      { *m = CreateMovieResponseMsg{} }
func (*CreateMovieResponseMsg) ProtoMessage() {}
func (*CreateMovieResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{1}
}
func (m *CreateMovieResponseMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMovieResponseMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMovieResponseMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMovieResponseMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMovieResponseMsg.Merge(m, src)
}
func (m *CreateMovieResponseMsg) XXX_Size() int {
	return m.Size()
}
func (m *CreateMovieResponseMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMovieResponseMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMovieResponseMsg proto.InternalMessageInfo

func (m *CreateMovieResponseMsg) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteMovieMsg struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteMovieMsg) Reset()      { *m = DeleteMovieMsg{} }
func (*DeleteMovieMsg) ProtoMessage() {}
func (*DeleteMovieMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{2}
}
func (m *DeleteMovieMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMovieMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMovieMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMovieMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMovieMsg.Merge(m, src)
}
func (m *DeleteMovieMsg) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMovieMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMovieMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMovieMsg proto.InternalMessageInfo

func (m *DeleteMovieMsg) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteMovieResponseMsg struct {
}

func (m *DeleteMovieResponseMsg) Reset()      { *m = DeleteMovieResponseMsg{} }
func (*DeleteMovieResponseMsg) ProtoMessage() {}
func (*DeleteMovieResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{3}
}
func (m *DeleteMovieResponseMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMovieResponseMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMovieResponseMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMovieResponseMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMovieResponseMsg.Merge(m, src)
}
func (m *DeleteMovieResponseMsg) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMovieResponseMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMovieResponseMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMovieResponseMsg proto.InternalMessageInfo

type GetMovieMsg struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetMovieMsg) Reset()      { *m = GetMovieMsg{} }
func (*GetMovieMsg) ProtoMessage() {}
func (*GetMovieMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{4}
}
func (m *GetMovieMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMovieMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMovieMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMovieMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMovieMsg.Merge(m, src)
}
func (m *GetMovieMsg) XXX_Size() int {
	return m.Size()
}
func (m *GetMovieMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMovieMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetMovieMsg proto.InternalMessageInfo

func (m *GetMovieMsg) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetMovieResponseMsg struct {
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *GetMovieResponseMsg) Reset()      { *m = GetMovieResponseMsg{} }
func (*GetMovieResponseMsg) ProtoMessage() {}
func (*GetMovieResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{5}
}
func (m *GetMovieResponseMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMovieResponseMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMovieResponseMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMovieResponseMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMovieResponseMsg.Merge(m, src)
}
func (m *GetMovieResponseMsg) XXX_Size() int {
	return m.Size()
}
func (m *GetMovieResponseMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMovieResponseMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetMovieResponseMsg proto.InternalMessageInfo

func (m *GetMovieResponseMsg) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type GetMoviesMsg struct {
}

func (m *GetMoviesMsg) Reset()      { *m = GetMoviesMsg{} }
func (*GetMoviesMsg) ProtoMessage() {}
func (*GetMoviesMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{6}
}
func (m *GetMoviesMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMoviesMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMoviesMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMoviesMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMoviesMsg.Merge(m, src)
}
func (m *GetMoviesMsg) XXX_Size() int {
	return m.Size()
}
func (m *GetMoviesMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMoviesMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetMoviesMsg proto.InternalMessageInfo

type GetMoviesResponseMsg struct {
	Movies []*Tuple `protobuf:"bytes,1,rep,name=movies,proto3" json:"movies,omitempty"`
}

func (m *GetMoviesResponseMsg) Reset()      { *m = GetMoviesResponseMsg{} }
func (*GetMoviesResponseMsg) ProtoMessage() {}
func (*GetMoviesResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{7}
}
func (m *GetMoviesResponseMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMoviesResponseMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMoviesResponseMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMoviesResponseMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMoviesResponseMsg.Merge(m, src)
}
func (m *GetMoviesResponseMsg) XXX_Size() int {
	return m.Size()
}
func (m *GetMoviesResponseMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMoviesResponseMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetMoviesResponseMsg proto.InternalMessageInfo

func (m *GetMoviesResponseMsg) GetMovies() []*Tuple {
	if m != nil {
		return m.Movies
	}
	return nil
}

type Tuple struct {
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Id    int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Tuple) Reset()      { *m = Tuple{} }
func (*Tuple) ProtoMessage() {}
func (*Tuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_937daf6a4ffecea5, []int{8}
}
func (m *Tuple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tuple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tuple.Merge(m, src)
}
func (m *Tuple) XXX_Size() int {
	return m.Size()
}
func (m *Tuple) XXX_DiscardUnknown() {
	xxx_messageInfo_Tuple.DiscardUnknown(m)
}

var xxx_messageInfo_Tuple proto.InternalMessageInfo

func (m *Tuple) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Tuple) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateMovieMsg)(nil), "CreateMovieMsg")
	proto.RegisterType((*CreateMovieResponseMsg)(nil), "CreateMovieResponseMsg")
	proto.RegisterType((*DeleteMovieMsg)(nil), "DeleteMovieMsg")
	proto.RegisterType((*DeleteMovieResponseMsg)(nil), "DeleteMovieResponseMsg")
	proto.RegisterType((*GetMovieMsg)(nil), "GetMovieMsg")
	proto.RegisterType((*GetMovieResponseMsg)(nil), "GetMovieResponseMsg")
	proto.RegisterType((*GetMoviesMsg)(nil), "GetMoviesMsg")
	proto.RegisterType((*GetMoviesResponseMsg)(nil), "GetMoviesResponseMsg")
	proto.RegisterType((*Tuple)(nil), "Tuple")
}

func init() { proto.RegisterFile("api/movie_service.proto", fileDescriptor_937daf6a4ffecea5) }

var fileDescriptor_937daf6a4ffecea5 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xb1, 0x4e, 0x02, 0x41,
	0x10, 0x86, 0x77, 0x41, 0x2e, 0x32, 0xc0, 0x91, 0xac, 0x08, 0x97, 0x4b, 0x9c, 0x90, 0x8d, 0x05,
	0x89, 0x71, 0x35, 0x90, 0x98, 0xd0, 0xaa, 0x89, 0x15, 0xcd, 0x69, 0x65, 0x43, 0x4e, 0xd9, 0x98,
	0x4b, 0x80, 0xbb, 0x70, 0x27, 0xb5, 0x8f, 0xe0, 0x63, 0xf8, 0x28, 0x96, 0x94, 0x94, 0xb2, 0x34,
	0x16, 0x16, 0x3c, 0x82, 0x61, 0xe1, 0x70, 0x31, 0xd0, 0xdd, 0xcc, 0xfc, 0x33, 0xff, 0x7f, 0x5f,
	0x16, 0x6a, 0x7e, 0x14, 0x5c, 0x0c, 0xc2, 0x71, 0x20, 0xbb, 0xb1, 0x1c, 0x8d, 0x83, 0x67, 0x29,
	0xa2, 0x51, 0x98, 0x84, 0xfc, 0x14, 0xec, 0x9b, 0x91, 0xf4, 0x13, 0xd9, 0x59, 0x0e, 0x3b, 0xf1,
	0x0b, 0x63, 0x70, 0x30, 0xf4, 0x07, 0xd2, 0xa1, 0x75, 0xda, 0xc8, 0x7b, 0xfa, 0x9b, 0x37, 0xa0,
	0x6a, 0xa8, 0x3c, 0x19, 0x47, 0xe1, 0x30, 0xd6, 0x6a, 0x1b, 0x32, 0x41, 0x4f, 0x6b, 0x73, 0x5e,
	0x26, 0xe8, 0xf1, 0x3a, 0xd8, 0xb7, 0xb2, 0x2f, 0x8d, 0x7b, 0xff, 0x15, 0x0e, 0x54, 0x0d, 0x85,
	0x71, 0x8b, 0x9f, 0x40, 0xe1, 0x4e, 0x26, 0x7b, 0x17, 0xcf, 0xe0, 0x28, 0x1d, 0x9b, 0x09, 0x2a,
	0x90, 0x4b, 0x82, 0xa4, 0x2f, 0x1d, 0x4b, 0x07, 0x5e, 0x15, 0xdc, 0x86, 0x62, 0x2a, 0x8e, 0x97,
	0xb7, 0xaf, 0xa0, 0xb2, 0xa9, 0xcd, 0x6d, 0x04, 0x4b, 0x63, 0x89, 0x1d, 0x5a, 0xcf, 0x36, 0x0a,
	0x4d, 0x4b, 0x3c, 0xbc, 0x46, 0x7d, 0xe9, 0xad, 0xbb, 0xfc, 0x1c, 0x72, 0xba, 0xf1, 0x67, 0x43,
	0x0d, 0x9b, 0x75, 0xc6, 0x4c, 0x9a, 0xb1, 0xf9, 0x43, 0xa1, 0xa4, 0x4d, 0xba, 0xf7, 0x2b, 0xcc,
	0xac, 0x0d, 0x05, 0x03, 0x1d, 0x2b, 0x8b, 0x6d, 0xdc, 0x6e, 0x4d, 0xec, 0x26, 0xcb, 0xc9, 0x72,
	0xd5, 0x20, 0xc5, 0xca, 0x62, 0x9b, 0xac, 0x5b, 0x13, 0x7b, 0x40, 0x12, 0x76, 0x09, 0x87, 0xe9,
	0xef, 0xb2, 0xa2, 0x30, 0xa8, 0xba, 0x15, 0xb1, 0x03, 0x22, 0x27, 0xac, 0x05, 0xf9, 0x0d, 0x20,
	0x56, 0x12, 0x26, 0x3c, 0xf7, 0x58, 0xec, 0x62, 0xc7, 0xc9, 0x75, 0x7b, 0x32, 0x43, 0x32, 0x9d,
	0x21, 0x59, 0xcc, 0x90, 0xbe, 0x29, 0xa4, 0x1f, 0x0a, 0xe9, 0xa7, 0x42, 0x3a, 0x51, 0x48, 0xbf,
	0x14, 0xd2, 0x6f, 0x85, 0x64, 0xa1, 0x90, 0xbe, 0xcf, 0x91, 0x4c, 0xe6, 0x48, 0xa6, 0x73, 0x24,
	0x8f, 0x59, 0x3f, 0x0a, 0x9e, 0x2c, 0xfd, 0xfe, 0x5a, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4b,
	0xc2, 0x3f, 0xdf, 0x9a, 0x02, 0x00, 0x00,
}

func (this *CreateMovieMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateMovieMsg)
	if !ok {
		that2, ok := that.(CreateMovieMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CreateMovieResponseMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateMovieResponseMsg)
	if !ok {
		that2, ok := that.(CreateMovieResponseMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *DeleteMovieMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteMovieMsg)
	if !ok {
		that2, ok := that.(DeleteMovieMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *DeleteMovieResponseMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteMovieResponseMsg)
	if !ok {
		that2, ok := that.(DeleteMovieResponseMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetMovieMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMovieMsg)
	if !ok {
		that2, ok := that.(GetMovieMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetMovieResponseMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMovieResponseMsg)
	if !ok {
		that2, ok := that.(GetMovieResponseMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *GetMoviesMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMoviesMsg)
	if !ok {
		that2, ok := that.(GetMoviesMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetMoviesResponseMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMoviesResponseMsg)
	if !ok {
		that2, ok := that.(GetMoviesResponseMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Movies) != len(that1.Movies) {
		return false
	}
	for i := range this.Movies {
		if !this.Movies[i].Equal(that1.Movies[i]) {
			return false
		}
	}
	return true
}
func (this *Tuple) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tuple)
	if !ok {
		that2, ok := that.(Tuple)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *CreateMovieMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.CreateMovieMsg{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateMovieResponseMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.CreateMovieResponseMsg{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteMovieMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.DeleteMovieMsg{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteMovieResponseMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.DeleteMovieResponseMsg{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMovieMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetMovieMsg{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMovieResponseMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetMovieResponseMsg{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMoviesMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.GetMoviesMsg{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMoviesResponseMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetMoviesResponseMsg{")
	if this.Movies != nil {
		s = append(s, "Movies: "+fmt.Sprintf("%#v", this.Movies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tuple) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.Tuple{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMovieService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CreateMovieMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMovieMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMovieMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMovieService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateMovieResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMovieResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMovieResponseMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintMovieService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMovieMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMovieMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMovieMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintMovieService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMovieResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMovieResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMovieResponseMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMovieMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMovieMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMovieMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintMovieService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMovieResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMovieResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMovieResponseMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMovieService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}

func (m *GetMoviesMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMoviesMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMoviesMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMoviesResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMoviesResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMoviesResponseMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Movies) > 0 {
		for iNdEx := len(m.Movies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Movies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMovieService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Tuple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tuple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tuple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintMovieService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMovieService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMovieService(dAtA []byte, offset int, v uint64) int {
	offset -= sovMovieService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateMovieMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMovieService(uint64(l))
	}
	return n
}

func (m *CreateMovieResponseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMovieService(uint64(m.Id))
	}
	return n
}

func (m *DeleteMovieMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMovieService(uint64(m.Id))
	}
	return n
}

func (m *DeleteMovieResponseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMovieMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMovieService(uint64(m.Id))
	}
	return n
}

func (m *GetMovieResponseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMovieService(uint64(l))
	}
	return n
}

func (m *GetMoviesMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMoviesResponseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Movies) > 0 {
		for _, e := range m.Movies {
			l = e.Size()
			n += 1 + l + sovMovieService(uint64(l))
		}
	}
	return n
}

func (m *Tuple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMovieService(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovMovieService(uint64(m.Id))
	}
	return n
}

func sovMovieService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMovieService(x uint64) (n int) {
	return sovMovieService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateMovieMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateMovieMsg{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateMovieResponseMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateMovieResponseMsg{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteMovieMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteMovieMsg{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteMovieResponseMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteMovieResponseMsg{`,
		`}`,
	}, "")
	return s
}
func (this *GetMovieMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMovieMsg{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetMovieResponseMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMovieResponseMsg{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetMoviesMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMoviesMsg{`,
		`}`,
	}, "")
	return s
}
func (this *GetMoviesResponseMsg) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMovies := "[]*Tuple{"
	for _, f := range this.Movies {
		repeatedStringForMovies += strings.Replace(f.String(), "Tuple", "Tuple", 1) + ","
	}
	repeatedStringForMovies += "}"
	s := strings.Join([]string{`&GetMoviesResponseMsg{`,
		`Movies:` + repeatedStringForMovies + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tuple) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tuple{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMovieService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateMovieMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMovieMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMovieMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMovieService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMovieService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMovieResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMovieResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMovieResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMovieMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMovieMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMovieMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMovieResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMovieResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMovieResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMovieMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMovieMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMovieMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMovieResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMovieResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMovieResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMovieService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMovieService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMoviesMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMoviesMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMoviesMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMoviesResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMoviesResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMoviesResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Movies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMovieService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMovieService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Movies = append(m.Movies, &Tuple{})
			if err := m.Movies[len(m.Movies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tuple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tuple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tuple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMovieService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMovieService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMovieService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovieService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMovieService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMovieService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMovieService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMovieService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMovieService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMovieService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMovieService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMovieService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMovieService = fmt.Errorf("proto: unexpected end of group")
)
